
#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Node for chaining
typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

// Hash table for chaining
typedef struct {
    Node* buckets[TABLE_SIZE];
} HashTableChaining;

// Hash table for open addressing
typedef struct {
    int key;
    int value;
    int isOccupied;
} HashTableOpen;

// Simple hash function 1 (for chaining)
int hashFunction1(int key) {
    return key % TABLE_SIZE;
}

// Simple hash function 2 (for open addressing)
int hashFunction2(int key) {
    return (key + 7) % TABLE_SIZE;
}

// Insert into hash table using chaining
void insertChaining(HashTableChaining* table, int key, int value) {
    int hashIndex = hashFunction1(key);
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->value = value;
    newNode->next = table->buckets[hashIndex];
    table->buckets[hashIndex] = newNode;
}

// Search in hash table using chaining
Node* searchChaining(HashTableChaining* table, int key) {
    int hashIndex = hashFunction1(key);
    Node* current = table->buckets[hashIndex];
    while (current != NULL) {
        if (current->key == key) {
            return current;
        }
        current = current->next;
    }
    return NULL;
}

// Insert into hash table using open addressing (linear probing)
void insertOpen(HashTableOpen* table, int key, int value) {
    int hashIndex = hashFunction2(key);
    int originalIndex = hashIndex;

    while (table[hashIndex].isOccupied) {
        hashIndex = (hashIndex + 1) % TABLE_SIZE;
        if (hashIndex == originalIndex) {
            printf("Table is full!\n");
            return;
        }
    }
    table[hashIndex].key = key;
    table[hashIndex].value = value;
    table[hashIndex].isOccupied = 1;
}

// Search in hash table using open addressing (linear probing)
int searchOpen(HashTableOpen* table, int key) {
    int hashIndex = hashFunction2(key);
    int originalIndex = hashIndex;

    while (table[hashIndex].isOccupied) {
        if (table[hashIndex].key == key) {
            return table[hashIndex].value;
        }
        hashIndex = (hashIndex + 1) % TABLE_SIZE;
        if (hashIndex == originalIndex) {
            break;
        }
    }
    return -1; // Not found
}

int main() {
    // Initialize hash table for chaining
    HashTableChaining tableChaining = {0};

    // Insert values into hash table using chaining
    insertChaining(&tableChaining, 10, 100);
    insertChaining(&tableChaining, 20, 200);
    insertChaining(&tableChaining, 30, 300);

    // Search in hash table using chaining
    Node* result = searchChaining(&tableChaining, 20);
    if (result != NULL) {
        printf("Value for key 20 using chaining: %d\n", result->value);
    } else {
        printf("Key 20 not found using chaining\n");
    }

    // Initialize hash table for open addressing
    HashTableOpen tableOpen[TABLE_SIZE] = {0};

    // Insert values into hash table using open addressing
    insertOpen(tableOpen, 10, 100);
    insertOpen(tableOpen, 20, 200);
    insertOpen(tableOpen, 30, 300);

    // Search in hash table using open addressing
    int value = searchOpen(tableOpen, 20);
    if (value != -1) {
        printf("Value for key 20 using open addressing: %d\n", value);
    } else {
        printf("Key 20 not found using open addressing\n");
    }

    return 0;
}
