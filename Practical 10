
#include <stdio.h>
#include <stdlib.h>

// Adjacency Matrix Representation
#define MAX_VERTICES 10
int adjMatrix[MAX_VERTICES][MAX_VERTICES];

// Adjacency List Node
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

// Adjacency List Representation
typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;

// Function to create a graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
    
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Function to create a node
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Add edge to the adjacency matrix
void addEdgeMatrix(int u, int v) {
    adjMatrix[u][v] = 1;
    adjMatrix[v][u] = 1;  // For undirected graph
}

// Add edge to the adjacency list
void addEdgeList(Graph* graph, int u, int v) {
    Node* newNode = createNode(v);
    newNode->next = graph->adjLists[u];
    graph->adjLists[u] = newNode;

    // Since it's an undirected graph, add edge from v to u as well
    newNode = createNode(u);
    newNode->next = graph->adjLists[v];
    graph->adjLists[v] = newNode;
}

// BFS traversal
void BFS(int startVertex) {
    int visited[MAX_VERTICES] = {0};
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;

    printf("BFS Traversal: ");
    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        for (int i = 0; i < MAX_VERTICES; i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

// DFS traversal
void DFSUtil(int vertex, int visited[]) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    for (int i = 0; i < MAX_VERTICES; i++) {
        if (adjMatrix[vertex][i] == 1 && !visited[i]) {
            DFSUtil(i, visited);
        }
    }
}

void DFS(int startVertex) {
    int visited[MAX_VERTICES] = {0};
    printf("DFS Traversal: ");
    DFSUtil(startVertex, visited);
    printf("\n");
}

// Main function
int main() {
    int numVertices = 5;  // You can change this as needed

    // Initialize adjacency matrix
    for (int i = 0; i < MAX_VERTICES; i++) {
        for (int j = 0; j < MAX_VERTICES; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    // Create adjacency list graph
    Graph* graph = createGraph(numVertices);

    // Adding edges
    addEdgeMatrix(0, 1);
    addEdgeMatrix(0, 2);
    addEdgeMatrix(1, 3);
    addEdgeMatrix(2, 4);
    addEdgeMatrix(3, 4);

    addEdgeList(graph, 0, 1);
    addEdgeList(graph, 0, 2);
    addEdgeList(graph, 1, 3);
    addEdgeList(graph, 2, 4);
    addEdgeList(graph, 3, 4);

    // Perform BFS and DFS
    BFS(0);
    DFS(0);

    return 0;
}
